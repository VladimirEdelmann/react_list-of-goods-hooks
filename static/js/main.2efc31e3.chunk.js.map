{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","ALPHABET","sort","firstGood","secondGood","localeCompare","LENGTH","length","reverse","console","log","App","useState","setReversing","NONE","setSortType","isChangesMade","className","type","classNames","onClick","current","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAcK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,SAAUC,EACZ,EADYA,WAGNC,EAAY,YAAOH,GAuBzB,OApBIC,IAAaJ,EAASO,UACxBD,EAAaE,MACX,SAACC,EAAWC,GAAZ,OAA2BD,EAAUE,cAAcD,MAInDN,IAAaJ,EAASY,QACxBN,EAAaE,MACX,SAACC,EAAWC,GAAZ,OAA2BD,EAAUI,OAASH,EAAWG,UAKzDR,GACFC,EAAaQ,UAIfC,QAAQC,IAAIZ,EAAUC,GAEfC,G,SAvCJN,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA0CE,IAAMiB,EAAgB,WAC3B,MAAmCC,oBAAS,GAA5C,mBAAOb,EAAP,KAAmBc,EAAnB,KACA,EAAgCD,mBAASlB,EAASoB,MAAlD,mBAAOhB,EAAP,KAAiBiB,EAAjB,KAEMC,EAAgBjB,GAAcD,IAAaJ,EAASoB,KAE1D,OACE,sBAAKG,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IACE,iBACA,CAAE,WAAYrB,IAAaJ,EAASO,WAGxCmB,QAAS,kBAAML,EAAYrB,EAASO,WARtC,iCAaA,wBACEiB,KAAK,SACLD,UACEE,IACE,oBACA,CAAE,WAAYrB,IAAaJ,EAASY,SAGxCc,QAAS,kBAAML,EAAYrB,EAASY,SARtC,4BAaA,wBACEY,KAAK,SACLD,UACEE,IACE,oBACA,CAAE,YAAapB,IAGnBqB,QAAS,kBAAMP,GAAa,SAAAQ,GAAO,OAAKA,MAR1C,qBAcEL,GACE,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPL,EAAYrB,EAASoB,MACrBD,GAAa,IALjB,sBAcN,6BAEIjB,EACED,EAAiB,CAAEI,aAAYD,aAC/BwB,KAAI,SAAAC,GAAI,OAAK,oBAAe,UAAQ,OAAvB,mBAAkCA,IAAzBA,YC7HlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2efc31e3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort goods if needed\n  if (sortType === SortType.ALPHABET) {\n    visibleGoods.sort(\n      (firstGood, secondGood) => firstGood.localeCompare(secondGood),\n    );\n  }\n\n  if (sortType === SortType.LENGTH) {\n    visibleGoods.sort(\n      (firstGood, secondGood) => firstGood.length - secondGood.length,\n    );\n  }\n\n  // Reverse goods if needed\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReversing] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const isChangesMade = isReversed || sortType !== SortType.NONE;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            classNames(\n              'button is-info',\n              { 'is-light': sortType !== SortType.ALPHABET },\n            )\n          }\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            classNames(\n              'button is-success',\n              { 'is-light': sortType !== SortType.LENGTH },\n            )\n          }\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            classNames(\n              'button is-warning',\n              { 'is-light': !isReversed },\n            )\n          }\n          onClick={() => setReversing(current => !current)}\n        >\n          Reverse\n        </button>\n\n        {\n          isChangesMade && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                setSortType(SortType.NONE);\n                setReversing(false);\n              }}\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        {\n          getReorderedGoods(\n            goodsFromServer, { isReversed, sortType },\n          ).map(good => (<li key={good} data-cy=\"Good\">{`${good}`}</li>))\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}